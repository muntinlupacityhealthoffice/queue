<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Medicine Claim - Admin App</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f3f4f6;
    }
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 50;
    }
    .modal-content {
      background-color: white;
      padding: 1.5rem;
      border-radius: 0.75rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      max-width: 90%;
      min-width: 300px;
    }
    .modal-btn-group {
      display: flex;
      justify-content: flex-end;
      gap: 0.5rem;
      margin-top: 1rem;
    }
    @media print {
      body * {
        visibility: hidden;
      }
      .printable-area, .printable-area * {
        visibility: visible;
      }
      .printable-area {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
      }
    }
    /* Simple spinner for loading state */
    .spinner {
      border: 4px solid rgba(0, 0, 0, 0.1);
      width: 24px;
      height: 24px;
      border-radius: 50%;
      border-left-color: #6366f1;
      animation: spin 1s ease infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body class="bg-gray-100 p-4 sm:p-6 md:p-10">
  <div id="modal-container"></div>
  <div id="app-root" class="max-w-7xl mx-auto space-y-6">
    <!-- Header -->
    <header class="flex flex-col sm:flex-row justify-between items-center bg-white p-4 sm:p-6 rounded-xl shadow-md">
      <div>
        <h1 class="text-xl sm:text-2xl font-bold text-gray-800">Medicine Claim â€” Admin</h1>
        <p class="text-sm text-gray-500 mt-1">Add clients, attach medicines, publish, mark claimed, export & print.</p>
        <div id="auth-status" class="text-xs mt-2 text-gray-400">Loading user...</div>
      </div>
      <div class="mt-4 sm:mt-0">
        <div id="last-saved" class="text-xs text-gray-400 text-right">Last saved: never</div>
        <div id="user-id-display" class="text-xs font-mono text-gray-400 mt-1 break-all">User ID: N/A</div>
      </div>
    </header>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">

      <!-- Left: Add Client & Medicines -->
      <div class="bg-white p-6 rounded-xl shadow-md lg:col-span-1">
        <h2 class="text-lg font-semibold text-gray-800">Add Client & Medicines</h2>
        <div class="mt-4">
          <label for="clientName" class="block text-sm font-medium text-gray-700">Client name</label>
          <input type="text" id="clientName" placeholder="e.g. Maria Santos" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" />
        </div>

        <div class="mt-4 flex flex-col sm:flex-row gap-4">
          <div class="flex-1">
            <label for="medName" class="block text-sm font-medium text-gray-700">Medicine name</label>
            <input type="text" id="medName" placeholder="e.g. Paracetamol" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" />
          </div>
          <div class="w-24">
            <label for="medQty" class="block text-sm font-medium text-gray-700">Qty</label>
            <input type="number" id="medQty" value="1" min="1" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" />
          </div>
          <div class="flex items-end">
            <button id="addMedBtn" class="w-full sm:w-auto bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm transition-colors duration-200">Add Med</button>
          </div>
        </div>

        <div id="draftMedsContainer" class="mt-4 text-sm text-gray-500">No medicines added yet.</div>

        <div class="mt-6 flex flex-col sm:flex-row gap-4">
          <button id="saveClientBtn" class="flex-1 bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm transition-colors duration-200">Save Client (to Drafts)</button>
          <button id="clearDraftBtn" class="flex-1 bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm transition-colors duration-200">Clear Draft</button>
        </div>

        <h3 class="text-md font-semibold text-gray-700 mt-6">Drafted Clients</h3>
        <div id="draftClients" class="mt-2 space-y-3 overflow-y-auto max-h-80">
          <div class="text-sm text-gray-500">Loading drafts...</div>
        </div>
        <div class="mt-6">
          <button id="publishBtn" class="w-full bg-indigo-500 hover:bg-indigo-600 text-white font-semibold py-2 px-4 rounded-md shadow-sm transition-colors duration-200">Publish All Drafts</button>
        </div>
      </div>

      <!-- Right: Published & Export -->
      <div class="bg-white p-6 rounded-xl shadow-md md:col-span-2">
        <h2 class="text-lg font-semibold text-gray-800">Published Clients</h2>
        <p class="text-sm text-gray-500 mt-1">Published clients are ready for delivery or claiming.</p>
        <div id="publishedList" class="mt-4 space-y-4 overflow-y-auto max-h-[500px]">
          <div class="text-sm text-gray-500">Loading published list...</div>
        </div>
      </div>

      <!-- Footer: Export & Print -->
      <div class="bg-white p-6 rounded-xl shadow-md col-span-1 md:col-span-2 lg:col-span-3 flex flex-wrap justify-between items-center gap-4">
        <div class="text-sm text-gray-500">
          Tip: Data is synced to the cloud. You can use the export options to create reports.
        </div>
        <div class="flex flex-wrap gap-4">
          <button id="downloadCsvBtn" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">Download CSV</button>
          <button id="printBtn" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">Print Report</button>
        </div>
      </div>
    </div>
  </div>

  <script type="module">
    // Firebase imports
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, doc, getDoc, addDoc, setDoc, updateDoc, deleteDoc, onSnapshot, collection, query, where, getDocs, runTransaction, Timestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
    import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
    
    // Set Firestore debug level
    setLogLevel('debug');

    // Global variables from the runtime environment
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

    // UI Elements
    const clientNameEl = document.getElementById('clientName');
    const medNameEl = document.getElementById('medName');
    const medQtyEl = document.getElementById('medQty');
    const addMedBtn = document.getElementById('addMedBtn');
    const draftMedsContainer = document.getElementById('draftMedsContainer');
    const saveClientBtn = document.getElementById('saveClientBtn');
    const clearDraftBtn = document.getElementById('clearDraftBtn');
    const draftClientsEl = document.getElementById('draftClients');
    const publishBtn = document.getElementById('publishBtn');
    const publishedListEl = document.getElementById('publishedList');
    const downloadCsvBtn = document.getElementById('downloadCsvBtn');
    const printBtn = document.getElementById('printBtn');
    const lastSavedEl = document.getElementById('last-saved');
    const userIdDisplayEl = document.getElementById('user-id-display');
    const modalContainer = document.getElementById('modal-container');
    const authStatusEl = document.getElementById('auth-status');

    let db;
    let auth;
    let userId;
    let localDraftMedicines = [];
    let isAuthReady = false;

    // Initialize Firebase
    if (Object.keys(firebaseConfig).length > 0) {
      const app = initializeApp(firebaseConfig);
      db = getFirestore(app);
      auth = getAuth(app);
      authStatusEl.textContent = 'Initializing...';
    } else {
      console.error("Firebase config is missing.");
      authStatusEl.textContent = 'Error: Firebase not configured.';
    }

    // --- Custom Modal UI Functions ---
    /**
     * Shows a custom modal dialog.
     * @param {Object} options - Modal options.
     * @param {string} options.message - The message to display.
     * @param {string} options.type - 'alert' or 'confirm'.
     * @param {string} options.title - The modal title.
     * @returns {Promise<boolean>} Resolves with true for 'OK'/'Yes', false for 'Cancel'/'No'.
     */
    function showModal(options) {
      return new Promise(resolve => {
        const { message, type = 'alert', title = 'Notification' } = options;
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
          <div class="modal-content">
            <h3 class="text-lg font-semibold text-gray-800 mb-2">${escapeHtml(title)}</h3>
            <p class="text-sm text-gray-600">${escapeHtml(message)}</p>
            <div class="modal-btn-group">
              ${type === 'confirm' ? `
                <button id="modal-cancel-btn" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md text-sm font-semibold hover:bg-gray-300">Cancel</button>
                <button id="modal-ok-btn" class="px-4 py-2 bg-blue-500 text-white rounded-md text-sm font-semibold hover:bg-blue-600">OK</button>
              ` : `
                <button id="modal-ok-btn" class="px-4 py-2 bg-blue-500 text-white rounded-md text-sm font-semibold hover:bg-blue-600">OK</button>
              `}
            </div>
          </div>
        `;
        
        modalContainer.appendChild(modal);

        const okBtn = document.getElementById('modal-ok-btn');
        const cancelBtn = document.getElementById('modal-cancel-btn');

        okBtn.addEventListener('click', () => {
          modalContainer.removeChild(modal);
          resolve(true);
        });

        if (cancelBtn) {
          cancelBtn.addEventListener('click', () => {
            modalContainer.removeChild(modal);
            resolve(false);
          });
        }
      });
    }

    // --- Data Persistence and Listeners ---
    let unsubscribeDrafts;
    let unsubscribePublished;

    // Use onAuthStateChanged to get the user ID and initialize listeners
    onAuthStateChanged(auth, async (user) => {
      if (user) {
        userId = user.uid;
        authStatusEl.textContent = 'Authenticated.';
      } else {
        // Sign in anonymously if no custom token is available
        authStatusEl.textContent = 'Signing in anonymously...';
        await signInAnonymously(auth);
        userId = auth.currentUser?.uid;
        authStatusEl.textContent = 'Signed in anonymously.';
      }
      
      if (userId) {
        isAuthReady = true;
        userIdDisplayEl.textContent = 'User ID: ' + userId;
        console.log("Authenticated with user ID:", userId);
        startFirestoreListeners();
      } else {
        authStatusEl.textContent = 'Authentication failed.';
      }
    });

    function startFirestoreListeners() {
      if (!db || !userId) return;

      const draftRef = collection(db, 'artifacts', appId, 'users', userId, 'drafts');
      const publishedRef = collection(db, 'artifacts', appId, 'users', userId, 'published');

      // Drafts listener
      unsubscribeDrafts = onSnapshot(draftRef, (snapshot) => {
        const drafts = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        renderDraftClients(drafts);
      }, (error) => {
        console.error("Error fetching drafts:", error);
      });

      // Published listener
      unsubscribePublished = onSnapshot(publishedRef, (snapshot) => {
        const published = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        renderPublished(published);
      }, (error) => {
        console.error("Error fetching published:", error);
      });
    }

    // --- UI Rendering Functions ---

    function renderDraftMeds() {
      if (localDraftMedicines.length === 0) {
        draftMedsContainer.innerHTML = '<div class="text-sm text-gray-500">No medicines added for this client yet.</div>';
        return;
      }
      draftMedsContainer.innerHTML = `
        <ul class="list-disc list-inside space-y-1 text-sm text-gray-600">
          ${localDraftMedicines.map((m, i) => `
            <li class="flex items-center justify-between">
              <span>${escapeHtml(m.name)} â€” ${m.qty}</span>
              <button data-i="${i}" class="text-red-500 hover:text-red-600 text-xs font-semibold" onclick="removeDraftMed(${i})">Remove</button>
            </li>
          `).join('')}
        </ul>
      `;
    }

    function renderDraftClients(drafts) {
      if (drafts.length === 0) {
        draftClientsEl.innerHTML = '<div class="text-sm text-gray-500">No drafted clients yet.</div>';
        publishBtn.disabled = true;
      } else {
        draftClientsEl.innerHTML = drafts.map(d => `
          <div class="bg-gray-50 p-3 rounded-lg border border-gray-200">
            <div class="flex items-center justify-between">
              <p class="font-semibold text-gray-800">${escapeHtml(d.clientName)}</p>
              <div class="flex gap-2">
                <button onclick="deleteDraft('${d.id}')" class="text-xs bg-red-100 hover:bg-red-200 text-red-700 font-semibold py-1 px-2 rounded-full">Delete</button>
              </div>
            </div>
            <ul class="list-disc list-inside text-sm text-gray-600 mt-2">
              ${d.medicines.map(m => `<li>${escapeHtml(m.name)} â€” ${m.qty}</li>`).join('')}
            </ul>
          </div>
        `).join('');
        publishBtn.disabled = false;
      }
    }

    function renderPublished(published) {
      if (published.length === 0) {
        publishedListEl.innerHTML = '<div class="text-sm text-gray-500">No published clients yet. Publish drafts to see them here.</div>';
        downloadCsvBtn.disabled = true;
        printBtn.disabled = true;
      } else {
        publishedListEl.innerHTML = published.map(p => {
          const claimedStatus = p.claimed ? `<span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Claimed</span>` : `<span class="bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Not Claimed</span>`;
          const lastClaimed = p.lastClaimedISO ? new Date(p.lastClaimedISO).toLocaleDateString() : 'N/A';
          const isClaimedThisMonth = p.claimed && p.claimedMonth === new Date().getMonth();
          const warningBadge = isClaimedThisMonth ? `<span class="bg-yellow-100 text-yellow-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Claimed this month</span>` : '';
          
          return `
            <div class="bg-white p-4 rounded-xl border border-gray-200 shadow-sm flex flex-col sm:flex-row justify-between items-start sm:items-center">
              <div class="flex-1">
                <div class="flex items-center gap-2">
                  <p class="font-semibold text-gray-800">${escapeHtml(p.clientName)}</p>
                  ${claimedStatus}
                  ${warningBadge}
                </div>
                <p class="text-xs text-gray-500 mt-1">Last Claimed: ${lastClaimed}</p>
                <ul class="list-disc list-inside text-sm text-gray-600 mt-2">
                  ${p.medicines.map(m => `<li>${escapeHtml(m.name)} â€” ${m.qty}</li>`).join('')}
                </ul>
              </div>
              <div class="mt-4 sm:mt-0 flex flex-col sm:items-end gap-2 text-sm">
                <div class="flex items-center gap-2">
                  <label for="claimed-${p.id}" class="text-gray-600">Claimed</label>
                  <input type="checkbox" id="claimed-${p.id}" data-id="${p.id}" ${p.claimed ? 'checked' : ''} class="form-checkbox h-4 w-4 text-indigo-600 transition duration-150 ease-in-out">
                </div>
                <div class="flex gap-2">
                  <button onclick="editPublished('${p.id}')" class="text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold py-1 px-2 rounded-full">Edit</button>
                  <button onclick="deletePublished('${p.id}')" class="text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold py-1 px-2 rounded-full">Delete</button>
                </div>
              </div>
            </div>
          `;
        }).join('');
        
        // Attach event listeners for checkboxes after rendering
        publishedListEl.querySelectorAll('input[type="checkbox"]').forEach(cb => {
          cb.addEventListener('change', (e) => handleClaimToggle(cb.getAttribute('data-id'), e.target.checked));
        });
        downloadCsvBtn.disabled = false;
        printBtn.disabled = false;
      }
    }

    // --- Action Handlers ---

    addMedBtn.addEventListener('click', () => {
      const name = clientNameEl.value.trim();
      const medName = medNameEl.value.trim();
      const medQty = parseInt(medQtyEl.value, 10) || 0;
      if (!name) {
        showModal({ title: 'Error', message: 'Please enter a client name first.', type: 'alert' });
        return;
      }
      if (!medName || medQty <= 0) {
        showModal({ title: 'Error', message: 'Please enter a valid medicine name and quantity greater than 0.', type: 'alert' });
        return;
      }
      localDraftMedicines.push({ name: medName, qty: medQty });
      medNameEl.value = '';
      medQtyEl.value = '1';
      renderDraftMeds();
    });

    clearDraftBtn.addEventListener('click', async () => {
      const confirmed = await showModal({ title: 'Clear Draft', message: 'Are you sure you want to clear the current medicine draft?', type: 'confirm' });
      if (confirmed) {
        localDraftMedicines = [];
        clientNameEl.value = '';
        renderDraftMeds();
      }
    });

    saveClientBtn.addEventListener('click', async () => {
      if (!isAuthReady) {
        showModal({ title: 'Error', message: 'App is still authenticating. Please wait a moment.', type: 'alert' });
        return;
      }

      const clientName = clientNameEl.value.trim();
      if (!clientName) {
        showModal({ title: 'Error', message: 'Please enter a client name.', type: 'alert' });
        return;
      }
      if (localDraftMedicines.length === 0) {
        showModal({ title: 'Error', message: 'Add at least one medicine for this client.', type: 'alert' });
        return;
      }

      const clientData = {
        clientName,
        medicines: localDraftMedicines,
        claimed: false,
        claimedMonth: null,
        lastClaimedISO: null,
        createdAt: Timestamp.now()
      };

      try {
        await addDoc(collection(db, 'artifacts', appId, 'users', userId, 'drafts'), clientData);
        localDraftMedicines = [];
        clientNameEl.value = '';
        renderDraftMeds();
        showModal({ title: 'Success', message: 'Client saved to drafts!', type: 'alert' });
      } catch (e) {
        console.error("Error saving client: ", e);
        showModal({ title: 'Error', message: 'Failed to save client. See console for details.', type: 'alert' });
      }
    });

    window.deleteDraft = async (id) => {
      const confirmed = await showModal({ title: 'Delete Draft', message: 'Are you sure you want to delete this drafted client?', type: 'confirm' });
      if (confirmed) {
        try {
          await deleteDoc(doc(db, 'artifacts', appId, 'users', userId, 'drafts', id));
        } catch (e) {
          console.error("Error deleting draft: ", e);
          showModal({ title: 'Error', message: 'Failed to delete draft. See console for details.', type: 'alert' });
        }
      }
    };

    publishBtn.addEventListener('click', async () => {
      if (!isAuthReady) {
        showModal({ title: 'Error', message: 'App is still authenticating. Please wait a moment.', type: 'alert' });
        return;
      }
      
      const draftsRef = collection(db, 'artifacts', appId, 'users', userId, 'drafts');
      const publishedRef = collection(db, 'artifacts', appId, 'users', userId, 'published');
      
      const q = query(draftsRef);
      const querySnapshot = await getDocs(q);
      
      if (querySnapshot.empty) {
        showModal({ title: 'Info', message: 'No drafts to publish.', type: 'alert' });
        return;
      }

      try {
        await runTransaction(db, async (transaction) => {
          querySnapshot.forEach((docSnap) => {
            const data = docSnap.data();
            transaction.set(doc(publishedRef, docSnap.id), data); // Move doc with same ID
            transaction.delete(docSnap.ref); // Delete from drafts
          });
        });
        showModal({ title: 'Success', message: `Published ${querySnapshot.size} client(s).`, type: 'alert' });
      } catch (e) {
        console.error("Transaction failed: ", e);
        showModal({ title: 'Error', message: 'Failed to publish drafts. See console for details.', type: 'alert' });
      }
    });

    window.handleClaimToggle = async (id, checked) => {
      const publishedRef = doc(db, 'artifacts', appId, 'users', userId, 'published', id);
      try {
        const publishedDoc = await getDoc(publishedRef);
        if (!publishedDoc.exists()) return;
        
        const client = publishedDoc.data();
        const currentMonth = new Date().getMonth();
        let confirmed = true;

        if (checked) {
          if (client.claimed && client.claimedMonth === currentMonth) {
            showModal({ title: 'Warning', message: `${client.clientName} has already claimed medicines this month!`, type: 'alert' });
            return; // Exit and let the UI listener revert the checkbox
          }
        } else {
          confirmed = await showModal({ title: 'Unclaim', message: `Are you sure you want to mark ${client.clientName} as NOT claimed?`, type: 'confirm' });
        }
        
        if (confirmed) {
          const updateData = checked ? {
            claimed: true,
            claimedMonth: currentMonth,
            lastClaimedISO: new Date().toISOString()
          } : {
            claimed: false,
            claimedMonth: null,
            lastClaimedISO: null
          };
          await updateDoc(publishedRef, updateData);
        }

      } catch (e) {
        console.error("Error updating claim status: ", e);
        showModal({ title: 'Error', message: 'Failed to update claim status. See console for details.', type: 'alert' });
      }
    };

    window.editPublished = async (id) => {
      const publishedRef = doc(db, 'artifacts', appId, 'users', userId, 'published', id);
      const docSnap = await getDoc(publishedRef);
      if (!docSnap.exists()) {
        showModal({ title: 'Error', message: 'Record not found.', type: 'alert' });
        return;
      }

      const p = docSnap.data();
      const newName = prompt('Edit client name', p.clientName);
      if (newName === null) return;
      const updatedName = newName.trim() || p.clientName;

      // Simple edit for medicines
      const medText = p.medicines.map(m => `${m.name},${m.qty}`).join('\n');
      const newMedText = prompt('Edit medicines (one per line as name,qty). Example:\nParacetamol,10', medText);
      if (newMedText === null) return;
      
      const lines = newMedText.split('\n').map(l => l.trim()).filter(Boolean);
      const meds = [];
      for(const ln of lines){
        const parts = ln.split(',').map(s => s.trim());
        if(parts.length < 2) continue;
        const name = parts[0];
        const qty = parseInt(parts[1], 10) || 1;
        meds.push({ name, qty });
      }
      
      if (meds.length === 0) {
        showModal({ title: 'Warning', message: 'No valid medicines entered; keeping previous medicines.', type: 'alert' });
        return;
      }

      try {
        await updateDoc(publishedRef, { clientName: updatedName, medicines: meds });
        showModal({ title: 'Success', message: 'Client details updated.', type: 'alert' });
      } catch (e) {
        console.error("Error editing client:", e);
        showModal({ title: 'Error', message: 'Failed to edit client. See console for details.', type: 'alert' });
      }
    };

    window.deletePublished = async (id) => {
      const confirmed = await showModal({ title: 'Delete Published', message: 'Are you sure you want to delete this published record?', type: 'confirm' });
      if (confirmed) {
        try {
          await deleteDoc(doc(db, 'artifacts', appId, 'users', userId, 'published', id));
        } catch (e) {
          console.error("Error deleting published record: ", e);
          showModal({ title: 'Error', message: 'Failed to delete record. See console for details.', type: 'alert' });
        }
      }
    };

    downloadCsvBtn.addEventListener('click', async () => {
      if (!isAuthReady) return;
      const publishedRef = collection(db, 'artifacts', appId, 'users', userId, 'published');
      const querySnapshot = await getDocs(publishedRef);
      
      if (querySnapshot.empty) {
        showModal({ title: 'Info', message: 'No published data to download.', type: 'alert' });
        return;
      }
      
      const lines = [];
      lines.push(['Client Name', 'Medicine', 'Quantity', 'Claimed', 'Last Claimed Date']);
      querySnapshot.docs.forEach(doc => {
        const p = doc.data();
        p.medicines.forEach(m => {
          lines.push([
            p.clientName,
            m.name,
            m.qty,
            p.claimed ? 'Yes' : 'No',
            p.lastClaimedISO ? new Date(p.lastClaimedISO).toLocaleString() : ''
          ]);
        });
      });
      const csv = lines.map(r => r.map(c => `"${String(c).replace(/"/g, '""')}"`).join(',')).join('\n');
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'medicine_published_report.csv';
      document.body.appendChild(a);
      a.click();
      setTimeout(() => { URL.revokeObjectURL(url); a.remove(); }, 5000);
    });

    printBtn.addEventListener('click', async () => {
      if (!isAuthReady) return;
      
      const publishedRef = collection(db, 'artifacts', appId, 'users', userId, 'published');
      const querySnapshot = await getDocs(publishedRef);
      const published = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

      if (published.length === 0) {
        const confirmed = await showModal({ title: 'Print', message: 'Published list is empty. Do you want to print a blank report?', type: 'confirm' });
        if (!confirmed) return;
      }
      
      const html = buildReportHtml(published, { title: 'Medicine Published Report' });
      const w = window.open('', '_blank');
      w.document.open();
      w.document.write(html);
      w.document.close();
      w.print();
    });

    function buildReportHtml(published, opts = {}) {
      const title = opts.title || 'Report';
      const now = new Date().toLocaleString();
      const rows = published.map(p => `
        <tr>
          <td style="padding:8px;border:1px solid #ddd; vertical-align:top;">${escapeHtml(p.clientName)}</td>
          <td style="padding:8px;border:1px solid #ddd; vertical-align:top;">${p.medicines.map(m => `${escapeHtml(m.name)} (${m.qty})`).join('<br>')}</td>
          <td style="padding:8px;border:1px solid #ddd; vertical-align:top;">${p.claimed ? 'Yes' : 'No'}</td>
          <td style="padding:8px;border:1px solid #ddd; vertical-align:top;">${p.lastClaimedISO ? new Date(p.lastClaimedISO).toLocaleString() : ''}</td>
        </tr>
      `).join('');

      return `
        <!doctype html>
        <html>
          <head>
            <meta charset="utf-8" />
            <title>${title}</title>
            <style>
              body { font-family: sans-serif; margin: 20px; color: #111; }
              h1 { margin: 0 0 6px 0; }
              table { border-collapse: collapse; width: 100%; margin-top: 12px; }
              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
              th { background: #f3f4f6; }
              .meta { color: #6b7280; font-size: 13px; }
            </style>
          </head>
          <body>
            <h1>${title}</h1>
            <div class="meta">Generated: ${now}</div>
            <table>
              <thead>
                <tr>
                  <th>Client</th>
                  <th>Medicines (qty)</th>
                  <th>Claimed</th>
                  <th>Last Claimed</th>
                </tr>
              </thead>
              <tbody>
                ${rows}
              </tbody>
            </table>
          </body>
        </html>
      `;
    }

    // Utility function
    function escapeHtml(s) {
      return String(s).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
    }
  </script>
</body>
</html>
